
lm35avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000312  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000312  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  000003b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b29  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d5  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e5  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000428  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b8  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  9e:	0c 94 87 01 	jmp	0x30e	; 0x30e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcdCommand>:

char Valor;

void lcdCommand( unsigned char cmnd )	//función de comando
{
	LCD_DPRT = cmnd;					//envia cmnd al puerto de datos
  a6:	8b b9       	out	0x0b, r24	; 11
	LCD_CPRT &= ~ (1<<LCD_RS);			//RS = 0 para comando
  a8:	28 98       	cbi	0x05, 0	; 5
	LCD_CPRT &= ~ (1<<LCD_RW);			//RW = 0 para escribir
  aa:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN);			//EN = 1 para pulso de H a L
  ac:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	8a 95       	dec	r24
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcdCommand+0xa>
  b4:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &= ~ (1<<LCD_EN);			//EN = 1 para pulso de H a L
  b6:	2a 98       	cbi	0x05, 2	; 5
  b8:	8f e8       	ldi	r24, 0x8F	; 143
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcdCommand+0x16>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcdCommand+0x1c>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <lcdData>:
	_delay_us(100);
}
void lcdData( unsigned char data )		//función de datos
{
	LCD_DPRT = data;					//enviar los datos al puerto de datos
  c6:	8b b9       	out	0x0b, r24	; 11
	LCD_CPRT |= (1<<LCD_RS);			//RS = 1 para datos
  c8:	28 9a       	sbi	0x05, 0	; 5
	LCD_CPRT &= ~ (1<<LCD_RW);			//RW = 0 para escribir
  ca:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN);			//EN = 1 para pulso de H a L
  cc:	2a 9a       	sbi	0x05, 2	; 5
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcdData+0xa>
  d4:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &= ~ (1<<LCD_EN);			//EN = 1 para pulso de H a L
  d6:	2a 98       	cbi	0x05, 2	; 5
  d8:	8f e8       	ldi	r24, 0x8F	; 143
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcdData+0x16>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcdData+0x1c>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <lcd_init>:
	_delay_us(100);
}
void lcd_init()							//función para iniciar la LCD
{
	LCD_DDDR = 0xFF;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	8a b9       	out	0x0a, r24	; 10
	LCD_CDDR = 0xFF;
  ea:	84 b9       	out	0x04, r24	; 4
	
	LCD_CPRT &=~(1<<LCD_EN);			//LCD_EN =0
  ec:	2a 98       	cbi	0x05, 2	; 5
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9f e1       	ldi	r25, 0x1F	; 31
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_init+0xc>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_init+0x12>
  f8:	00 00       	nop
	_delay_us(2000);					//esperar para inicar
	lcdCommand(0x38);					//iniciar LCD con 2 lineas, matriz de 5x7
  fa:	88 e3       	ldi	r24, 0x38	; 56
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	lcdCommand(0x0E);					//display encendido y cursor encendido
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	lcdCommand(0x01);					//limpiar la lCD
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	9f e1       	ldi	r25, 0x1F	; 31
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_init+0x2a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_init+0x30>
 116:	00 00       	nop
	_delay_us(2000);					//esperar
	lcdCommand(0x06);					//cambiar el cursor
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 11e:	08 95       	ret

00000120 <lcd_gotoxy>:
}
void lcd_gotoxy(unsigned char x, unsigned char y)	//función para el posicionamiento del cursor con base en la tabla del libro
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <lcd_gotoxy+0x6>
 126:	00 d0       	rcall	.+0      	; 0x128 <lcd_gotoxy+0x8>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[]={0x80,0xC0,0x94,0xD4};//table 12-4
 12c:	90 e8       	ldi	r25, 0x80	; 128
 12e:	99 83       	std	Y+1, r25	; 0x01
 130:	90 ec       	ldi	r25, 0xC0	; 192
 132:	9a 83       	std	Y+2, r25	; 0x02
 134:	94 e9       	ldi	r25, 0x94	; 148
 136:	9b 83       	std	Y+3, r25	; 0x03
 138:	94 ed       	ldi	r25, 0xD4	; 212
 13a:	9c 83       	std	Y+4, r25	; 0x04
	lcdCommand(firstCharAdr[y-1] + x - 1);
 13c:	fe 01       	movw	r30, r28
 13e:	e6 0f       	add	r30, r22
 140:	f1 1d       	adc	r31, r1
 142:	81 50       	subi	r24, 0x01	; 1
 144:	90 81       	ld	r25, Z
 146:	89 0f       	add	r24, r25
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 14c:	8f e8       	ldi	r24, 0x8F	; 143
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_gotoxy+0x30>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_gotoxy+0x36>
 156:	00 00       	nop
	_delay_us(100);
}
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <lcd_print>:
void lcd_print( char * str )			//función para imprimir en la lCD
{
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	fc 01       	movw	r30, r24
	unsigned char i = 0 ;
	while(str[i]!=0)					//mientras no termine la cadena
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	59 f0       	breq	.+22     	; 0x18a <lcd_print+0x24>
 174:	8f 01       	movw	r16, r30
 176:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcdData(str[i]);
 178:	0e 94 63 00 	call	0xc6	; 0xc6 <lcdData>
		i++ ;
 17c:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_us(100);
}
void lcd_print( char * str )			//función para imprimir en la lCD
{
	unsigned char i = 0 ;
	while(str[i]!=0)					//mientras no termine la cadena
 17e:	f8 01       	movw	r30, r16
 180:	ec 0f       	add	r30, r28
 182:	f1 1d       	adc	r31, r1
 184:	80 81       	ld	r24, Z
 186:	81 11       	cpse	r24, r1
 188:	f7 cf       	rjmp	.-18     	; 0x178 <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++ ;
	}
}
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <main>:


int main(void)
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <main+0x6>
 198:	00 d0       	rcall	.+0      	; 0x19a <main+0x8>
 19a:	1f 92       	push	r1
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
	char numcad[5];
	DDRC = 0;		//puerto C como entrada para el ADC
 1a0:	17 b8       	out	0x07, r1	; 7
    UBRR0=51;		//PARA CONFIGURAR LA VELOCIDAD
 1a2:	83 e3       	ldi	r24, 0x33	; 51
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    ADMUX=0xc0;		//Vref a 1.1V, ADC0, justificado
 1ae:	80 ec       	ldi	r24, 0xC0	; 192
 1b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    ADCSRA=0X87;	//Habilitar el ADC y prescalador ck/128
 1b4:	87 e8       	ldi	r24, 0x87	; 135
 1b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	lcd_init();		//inicializar la LCD
 1ba:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_init>
	
    while (1) 
    {
		ADCSRA|=(1<<ADSC);					//inciar conversión
 1be:	0a e7       	ldi	r16, 0x7A	; 122
 1c0:	10 e0       	ldi	r17, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);		//esperar para el final de la conversión
		ADCSRA |= (1<<ADIF);				//limpiar la bandera ADIF
		Valor=(ADCL|(ADCH<<8))*10/93;		//valor = valor del ADC/ 9.3 
 1c2:	0f 2e       	mov	r0, r31
 1c4:	f8 e7       	ldi	r31, 0x78	; 120
 1c6:	af 2e       	mov	r10, r31
 1c8:	b1 2c       	mov	r11, r1
 1ca:	f0 2d       	mov	r31, r0
 1cc:	0f 2e       	mov	r0, r31
 1ce:	f9 e7       	ldi	r31, 0x79	; 121
 1d0:	cf 2e       	mov	r12, r31
 1d2:	d1 2c       	mov	r13, r1
 1d4:	f0 2d       	mov	r31, r0
 1d6:	0f 2e       	mov	r0, r31
 1d8:	fd e5       	ldi	r31, 0x5D	; 93
 1da:	ef 2e       	mov	r14, r31
 1dc:	f1 2c       	mov	r15, r1
 1de:	f0 2d       	mov	r31, r0
    ADCSRA=0X87;	//Habilitar el ADC y prescalador ck/128
	lcd_init();		//inicializar la LCD
	
    while (1) 
    {
		ADCSRA|=(1<<ADSC);					//inciar conversión
 1e0:	f8 01       	movw	r30, r16
 1e2:	80 81       	ld	r24, Z
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);		//esperar para el final de la conversión
 1e8:	f8 01       	movw	r30, r16
 1ea:	80 81       	ld	r24, Z
 1ec:	84 ff       	sbrs	r24, 4
 1ee:	fc cf       	rjmp	.-8      	; 0x1e8 <main+0x56>
		ADCSRA |= (1<<ADIF);				//limpiar la bandera ADIF
 1f0:	80 81       	ld	r24, Z
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	80 83       	st	Z, r24
		Valor=(ADCL|(ADCH<<8))*10/93;		//valor = valor del ADC/ 9.3 
 1f6:	f5 01       	movw	r30, r10
 1f8:	20 81       	ld	r18, Z
 1fa:	f6 01       	movw	r30, r12
 1fc:	80 81       	ld	r24, Z
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	38 2b       	or	r19, r24
 202:	c9 01       	movw	r24, r18
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	82 0f       	add	r24, r18
 216:	93 1f       	adc	r25, r19
 218:	b7 01       	movw	r22, r14
 21a:	0e 94 2a 01 	call	0x254	; 0x254 <__divmodhi4>
 21e:	86 2f       	mov	r24, r22
 220:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 224:	4a e0       	ldi	r20, 0x0A	; 10
 226:	be 01       	movw	r22, r28
 228:	6f 5f       	subi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__itoa_ncheck>
		itoa(Valor,numcad,10);				//convertimos valor en una cadena de texto para imprimirla por la LCD
		lcd_gotoxy(1,1);					//posición del cursos
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		lcd_print("sensor lm35");			//imprimimos sensor lm35
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_print>
		lcd_gotoxy(1,2);					//posición del cursor
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		lcd_print(numcad);					//imprimimos la temperatura
 24a:	ce 01       	movw	r24, r28
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_print>
		
    }
 252:	c6 cf       	rjmp	.-116    	; 0x1e0 <main+0x4e>

00000254 <__divmodhi4>:
 254:	97 fb       	bst	r25, 7
 256:	07 2e       	mov	r0, r23
 258:	16 f4       	brtc	.+4      	; 0x25e <__divmodhi4+0xa>
 25a:	00 94       	com	r0
 25c:	07 d0       	rcall	.+14     	; 0x26c <__divmodhi4_neg1>
 25e:	77 fd       	sbrc	r23, 7
 260:	09 d0       	rcall	.+18     	; 0x274 <__divmodhi4_neg2>
 262:	0e 94 3e 01 	call	0x27c	; 0x27c <__udivmodhi4>
 266:	07 fc       	sbrc	r0, 7
 268:	05 d0       	rcall	.+10     	; 0x274 <__divmodhi4_neg2>
 26a:	3e f4       	brtc	.+14     	; 0x27a <__divmodhi4_exit>

0000026c <__divmodhi4_neg1>:
 26c:	90 95       	com	r25
 26e:	81 95       	neg	r24
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	08 95       	ret

00000274 <__divmodhi4_neg2>:
 274:	70 95       	com	r23
 276:	61 95       	neg	r22
 278:	7f 4f       	sbci	r23, 0xFF	; 255

0000027a <__divmodhi4_exit>:
 27a:	08 95       	ret

0000027c <__udivmodhi4>:
 27c:	aa 1b       	sub	r26, r26
 27e:	bb 1b       	sub	r27, r27
 280:	51 e1       	ldi	r21, 0x11	; 17
 282:	07 c0       	rjmp	.+14     	; 0x292 <__udivmodhi4_ep>

00000284 <__udivmodhi4_loop>:
 284:	aa 1f       	adc	r26, r26
 286:	bb 1f       	adc	r27, r27
 288:	a6 17       	cp	r26, r22
 28a:	b7 07       	cpc	r27, r23
 28c:	10 f0       	brcs	.+4      	; 0x292 <__udivmodhi4_ep>
 28e:	a6 1b       	sub	r26, r22
 290:	b7 0b       	sbc	r27, r23

00000292 <__udivmodhi4_ep>:
 292:	88 1f       	adc	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	5a 95       	dec	r21
 298:	a9 f7       	brne	.-22     	; 0x284 <__udivmodhi4_loop>
 29a:	80 95       	com	r24
 29c:	90 95       	com	r25
 29e:	bc 01       	movw	r22, r24
 2a0:	cd 01       	movw	r24, r26
 2a2:	08 95       	ret

000002a4 <__itoa_ncheck>:
 2a4:	bb 27       	eor	r27, r27
 2a6:	4a 30       	cpi	r20, 0x0A	; 10
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <__itoa_ncheck+0x12>
 2aa:	99 23       	and	r25, r25
 2ac:	22 f4       	brpl	.+8      	; 0x2b6 <__itoa_ncheck+0x12>
 2ae:	bd e2       	ldi	r27, 0x2D	; 45
 2b0:	90 95       	com	r25
 2b2:	81 95       	neg	r24
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__utoa_common>

000002ba <__utoa_ncheck>:
 2ba:	bb 27       	eor	r27, r27

000002bc <__utoa_common>:
 2bc:	fb 01       	movw	r30, r22
 2be:	55 27       	eor	r21, r21
 2c0:	aa 27       	eor	r26, r26
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	aa 1f       	adc	r26, r26
 2c8:	a4 17       	cp	r26, r20
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <__utoa_common+0x14>
 2cc:	a4 1b       	sub	r26, r20
 2ce:	83 95       	inc	r24
 2d0:	50 51       	subi	r21, 0x10	; 16
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <__utoa_common+0x6>
 2d4:	a0 5d       	subi	r26, 0xD0	; 208
 2d6:	aa 33       	cpi	r26, 0x3A	; 58
 2d8:	08 f0       	brcs	.+2      	; 0x2dc <__utoa_common+0x20>
 2da:	a9 5d       	subi	r26, 0xD9	; 217
 2dc:	a1 93       	st	Z+, r26
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	79 f7       	brne	.-34     	; 0x2c0 <__utoa_common+0x4>
 2e2:	b1 11       	cpse	r27, r1
 2e4:	b1 93       	st	Z+, r27
 2e6:	11 92       	st	Z+, r1
 2e8:	cb 01       	movw	r24, r22
 2ea:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <strrev>

000002ee <strrev>:
 2ee:	dc 01       	movw	r26, r24
 2f0:	fc 01       	movw	r30, r24
 2f2:	67 2f       	mov	r22, r23
 2f4:	71 91       	ld	r23, Z+
 2f6:	77 23       	and	r23, r23
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <strrev+0x4>
 2fa:	32 97       	sbiw	r30, 0x02	; 2
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <strrev+0x18>
 2fe:	7c 91       	ld	r23, X
 300:	6d 93       	st	X+, r22
 302:	70 83       	st	Z, r23
 304:	62 91       	ld	r22, -Z
 306:	ae 17       	cp	r26, r30
 308:	bf 07       	cpc	r27, r31
 30a:	c8 f3       	brcs	.-14     	; 0x2fe <strrev+0x10>
 30c:	08 95       	ret

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
